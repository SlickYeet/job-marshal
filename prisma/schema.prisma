generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum UserType {
    EMPLOYER
    EMPLOYEE
}

model User {
    id String @id @default(cuid())

    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?

    type UserType?

    onboardingCompleted Boolean @default(false)

    accounts Account[]
    sessions Session[]

    employer Employer?
    employee Employee?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    expires_at Int?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@id([provider, providerAccountId])
    @@index([userId])
}

model Session {
    sessionToken String @unique

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    expires   DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String

    expires DateTime

    @@id([identifier, token])
}

model Employer {
    id String @id @default(cuid())

    name          String
    location      String
    about         String
    logo          String
    website       String
    socialAccount String?

    userId String
    user   User   @relation(references: [id], fields: [userId], onDelete: Cascade, onUpdate: Cascade)

    jobPostings JobPost[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId])
}

model Employee {
    id String @id @default(cuid())

    name   String
    about  String
    resume String
    // skills String[]

    userId String
    user   User   @relation(references: [id], fields: [userId], onDelete: Cascade, onUpdate: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId])
}

enum JOB_POST_STATUS {
    DRAFT
    ACTIVE
    EXPIRED
}

model JobPost {
    id String @id @default(cuid())

    title           String
    description     String
    employmentType  String
    location        String
    salaryFrom      Int
    salaryTo        Int
    listingDuration Int
    benefits        String[]
    status          JOB_POST_STATUS @default(DRAFT)

    employerId String
    employer   Employer @relation(fields: [employerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([employerId])
}
